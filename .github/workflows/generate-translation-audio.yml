name: Generate Translation Audio

on:
  workflow_dispatch: # Allows manual triggering of the workflow with input
    inputs:
      date:
        description: "Date to process (e.g., 2025-01-10)"
        required: false
        default: ""

  push: # Automatically triggers when new processed files are added
    paths:
      - processed/*.txt

jobs:
  generate-audio:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # Step 4: Write and Execute Python Script
      - name: Generate Audio Directly
        env:
          ELEVEN_LABS_API_KEY: ${{ secrets.ELEVEN_LABS_API_KEY }}
        run: |
          cat <<EOF > generate_audio.py
          import os
          import requests
          import sys

          # Configuration
          ELEVEN_LABS_API_KEY = os.getenv("ELEVEN_LABS_API_KEY")
          if not ELEVEN_LABS_API_KEY:
              print("Error: ELEVEN_LABS_API_KEY is not set.")
              sys.exit(1)

          API_URL = "https://api.elevenlabs.io/v1/text-to-speech"
          VOICE_ID = "Mv8AjrYZCBkdsmDHNwcB"
          output_dir = "processed-audio"
          os.makedirs(output_dir, exist_ok=True)

          # Function to generate audio
          def generate_audio(text, output_path):
              headers = {
                  "Authorization": f"Bearer {ELEVEN_LABS_API_KEY}",
                  "Content-Type": "application/json",
              }
              payload = {
                  "text": text,
                  "voice_id": VOICE_ID,
              }
              print("Request Headers:", headers)
              print("Request Payload:", payload)
              response = requests.post(API_URL, json=payload, headers=headers)
              print("Response Code:", response.status_code)
              print("Response Body:", response.text)
              if response.status_code == 200:
                  with open(output_path, "wb") as audio_file:
                      audio_file.write(response.content)
                  print(f"Audio saved to {output_path}")
              else:
                  print(f"Failed to generate audio: {response.status_code}, {response.text}")
                  sys.exit(1)

          # Test example
          test_text = "こんにちは、元気ですか？"
          test_output_path = os.path.join(output_dir, "test.mp3")
          generate_audio(test_text, test_output_path)
          EOF

          python generate_audio.py
