name: Generate Audio from Translation

on:
  push:
    paths:
      - processed/**  # Automatically trigger on new files in the processed directory
  workflow_dispatch:
    inputs:
      file_date:
        description: "Date of the file to process (YYYY-MM-DD)"
        required: false

jobs:
  generate-audio:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests fugashi unidic-lite

    - name: Process translation file
      env:
        ELEVEN_LABS_API_KEY: ${{ secrets.ELEVEN_LABS_API_KEY }}
      run: |
        mkdir -p processed-audio
        python <<EOF
        import os
        import re
        from datetime import datetime
        import requests
        import fugashi  # For tokenizing Japanese text

        # Helper function to convert text to Hiragana
        def to_hiragana(text):
            tagger = fugashi.Tagger()
            return ''.join(token.feature.kana or token.surface for token in tagger(text))

        # Get inputs
        input_date = "${{ github.event.inputs.file_date }}" or datetime.utcnow().strftime("%Y-%m-%d")
        workspace = os.getenv("GITHUB_WORKSPACE", ".")
        processed_dir = os.path.join(workspace, "processed")
        processed_audio_dir = os.path.join(workspace, "processed-audio")

        # Find the target file
        target_file = os.path.join(processed_dir, f"{input_date}.txt")
        if not os.path.exists(target_file):
            print(f"Error: File '{target_file}' does not exist.")
            exit(1)

        # Extract "1. Translation" section
        with open(target_file, "r", encoding="utf-8") as file:
            content = file.read()

        # Use regex for fuzzy matching to extract the translation section
        match = re.search(
            r"1[.\s]*(?:\*\*Translation\*\*|Translation):?\s*(.*?)(?=\n[2-9][.\s]|$)", 
            content, 
            re.S
        )
        if not match:
            print(f"Error: '1. Translation' section not found in {target_file}.")
            exit(1)

        translation = match.group(1).strip()
        print(f"Original translation to process: {translation}")

        # Convert translation to Hiragana
        hiragana_translation = to_hiragana(translation)
        print(f"Converted Hiragana text: {hiragana_translation}")

        # Load API key and set headers
        ELEVEN_LABS_API_KEY = os.getenv("ELEVEN_LABS_API_KEY")
        if not ELEVEN_LABS_API_KEY:
            print("Error: ELEVEN_LABS_API_KEY is not set.")
            exit(1)

        VOICE_ID = "3JDquces8E8bkmvbh6Bc"  # Updated voice ID
        API_URL = f"https://api.elevenlabs.io/v1/text-to-speech/{VOICE_ID}"
        headers = {
            "xi-api-key": ELEVEN_LABS_API_KEY.strip(),
            "Content-Type": "application/json",
        }
        payload = {
            "text": hiragana_translation,
            "voice_settings": {
                "stability": 1.0,       # Maximum stability for consistent pronunciation
                "similarity_boost": 0.0 # Neutral tone for the voice
            }
        }

        # Generate audio
        response = requests.post(API_URL, json=payload, headers=headers)
        if response.status_code == 200:
            os.makedirs(processed_audio_dir, exist_ok=True)
            base_filename = os.path.basename(target_file).replace(".txt", "")
            output_path = os.path.join(processed_audio_dir, f"{base_filename}-audio.mp3")
            with open(output_path, "wb") as audio_file:
                audio_file.write(response.content)
            print(f"Audio saved to {output_path}")
        else:
            print("Error generating audio:", response.text)
            exit(1)
        EOF

    - name: Verify generated audio
      run: |
        echo "Checking processed-audio directory contents:"
        ls -l processed-audio || echo "No files generated"

    - name: Commit and push audio file
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add processed-audio/*.mp3
        git commit -m "Add generated audio for file"
        git push
