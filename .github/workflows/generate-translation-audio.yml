name: Generate Translation Audio

on:
  workflow_dispatch: # Allows manual triggering of the workflow with input
    inputs:
      date:
        description: "Date to process (e.g., 2025-01-10)"
        required: false
        default: ""

  push: # Automatically triggers when new processed files are added
    paths:
      - processed/*.txt

jobs:
  generate-audio:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install websockets

      # Step 4: Generate Audio with WebSocket
      - name: Generate Audio Directly
        env:
          ELEVEN_LABS_API_KEY: ${{ secrets.ELEVEN_LABS_API_KEY }}
        run: |
          cat <<EOF > generate_audio_ws.py
          import os
          import websockets
          import json
          import asyncio

          ELEVEN_LABS_API_KEY = os.getenv("ELEVEN_LABS_API_KEY")
          VOICE_ID = "Mv8AjrYZCBkdsmDHNwcB".strip()  # Ensure no trailing spaces
          API_URL = f"wss://api.elevenlabs.io/v1/text-to-speech/{VOICE_ID}/stream-input"
          OUTPUT_DIR = "processed-audio"
          os.makedirs(OUTPUT_DIR, exist_ok=True)

          async def generate_audio():
              async with websockets.connect(
                  API_URL,
                  extra_headers={"Authorization": f"Bearer {ELEVEN_LABS_API_KEY}"}
              ) as websocket:
                  # Send input text
                  text_input = "こんにちは、元気ですか？"
                  payload = {"text": text_input}
                  await websocket.send(json.dumps(payload))
                  print(f"Sent: {payload}")

                  # Receive audio data
                  with open(f"{OUTPUT_DIR}/test.mp3", "wb") as audio_file:
                      while True:
                          try:
                              audio_chunk = await websocket.recv()
                              audio_file.write(audio_chunk)
                              print("Received audio chunk.")
                          except websockets.exceptions.ConnectionClosed:
                              print("Connection closed.")
                              break

          asyncio.run(generate_audio())
          EOF

          python generate_audio_ws.py
