name: Generate Audio using Google Text-to-Speech

on:
  push:
    paths:
      - processed/**
  workflow_dispatch:
    inputs:
      file_date:
        description: "Date of the file to process (YYYY-MM-DD)"
        required: false

jobs:
  generate-audio:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Process translation file and generate audio
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        mkdir -p processed-audio
        python <<EOF
        import os
        import re
        import requests
        from datetime import datetime

        # Get inputs
        input_date = "${{ github.event.inputs.file_date }}" or datetime.utcnow().strftime("%Y-%m-%d")
        workspace = os.getenv("GITHUB_WORKSPACE", ".")
        processed_dir = os.path.join(workspace, "processed")
        processed_audio_dir = os.path.join(workspace, "processed-audio")

        # Find the target file
        target_file = os.path.join(processed_dir, f"{input_date}.txt")
        if not os.path.exists(target_file):
            print(f"Error: File '{target_file}' does not exist.")
            exit(1)

        # Extract "1. Translation" section
        with open(target_file, "r", encoding="utf-8") as file:
            content = file.read()

        # Use regex for fuzzy matching to extract the translation section
        match = re.search(
            r"1[.\s]*(?:\*\*Translation\*\*|Translation):?\s*(.*?)(?=\n[2-9][.\s]|$)", 
            content, 
            re.S
        )
        if not match:
            print(f"Error: '1. Translation' section not found in {target_file}.")
            exit(1)

        translation = match.group(1).strip()
        print(f"Translation to process: {translation}")

        # Set up the Google Text-to-Speech API request
        api_url = "https://texttospeech.googleapis.com/v1/text:synthesize"
        headers = {
            "Authorization": f"Bearer {os.getenv('GOOGLE_API_KEY')}",
            "Content-Type": "application/json"
        }
        payload = {
            "input": {"text": translation},
            "voice": {
                "languageCode": "ja-JP",
                "name": "ja-JP-Standard-A"
            },
            "audioConfig": {
                "audioEncoding": "LINEAR16"
            }
        }

        # Call the API
        response = requests.post(api_url, json=payload, headers=headers)
        if response.status_code == 200:
            audio_content = response.json()["audioContent"]
            os.makedirs(processed_audio_dir, exist_ok=True)
            base_filename = os.path.basename(target_file).replace(".txt", "")
            output_path = os.path.join(processed_audio_dir, f"{base_filename}-audio.wav")
            with open(output_path, "wb") as audio_file:
                audio_file.write(audio_content.encode("ISO-8859-1"))  # Decode Base64 string into binary
            print(f"Audio content written to file: {output_path}")
        else:
            print("Error generating audio:", response.text)
            exit(1)
        EOF

    - name: Verify generated audio
      run: |
        echo "Checking processed-audio directory contents:"
        ls -l processed-audio || echo "No files generated"

    - name: Commit and push audio file
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add processed-audio/*.wav
        git commit -m "Add generated audio for file"
        git push
