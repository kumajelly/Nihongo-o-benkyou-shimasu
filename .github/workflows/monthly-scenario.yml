- name: Generate Scenario Using OpenAI API
  id: generate_scenario
  env:
    OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  run: |
    SUMMARY=$(cat "$INPUT_FILE")

    # Estimate token count using character approximation
    TOKEN_COUNT=$(echo "$SUMMARY" | wc -m) # Character count
    TOKEN_ESTIMATE=$((TOKEN_COUNT / 4))    # Approximate tokens (1 token â‰ˆ 4 characters)
    SYSTEM_MESSAGE_TOKENS=100             # Estimated token size for the system prompt
    MAX_COMPLETION_TOKENS=1000            # Limit output to 1000 tokens
    MAX_INPUT_TOKENS=$((8192 - SYSTEM_MESSAGE_TOKENS - MAX_COMPLETION_TOKENS))

    echo "Estimated Token Count: $TOKEN_ESTIMATE"
    echo "Maximum Allowed Input Tokens: $MAX_INPUT_TOKENS"

    # Truncate if token estimate exceeds limit
    if [ "$TOKEN_ESTIMATE" -gt "$MAX_INPUT_TOKENS" ]; then
      echo "Input exceeds token limit. Truncating..."
      MAX_CHARACTERS=$((MAX_INPUT_TOKENS * 4))  # Approximate max characters
      SUMMARY=$(echo "$SUMMARY" | head -c "$MAX_CHARACTERS")
      echo "Input truncated to $MAX_CHARACTERS characters."
    fi

    # Create output directory if it doesn't exist
    mkdir -p $(dirname "$OUTPUT_FILE")

    # Create API payload
    PAYLOAD=$(jq -n --arg summary "$SUMMARY" '{
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "You are a creative writer generating dialogue scenarios. Take the vocabulary, sentences, and questions from the provided monthly summary and create a realistic, fictional dialogue between two characters. The output must have three sections: 1. Japanese (original script) 2. Romaji (phonetic transcription) 3. English (translation). Keep the output concise, with no more than 1000 tokens across all sections. Ensure the scenario reflects natural conversational flow and incorporates the provided vocabulary and sentences meaningfully."
        },
        {
          role: "user",
          content: $summary
        }
      ],
      max_tokens: 1000
    }')

    # Debug: Log payload
    echo "Payload to OpenAI API:"
    echo "$PAYLOAD"

    RESPONSE=$(echo "$PAYLOAD" | curl -s https://api.openai.com/v1/chat/completions \
      -H "Authorization: Bearer $OPENAI_API_KEY" \
      -H "Content-Type: application/json" \
      -d @-)

    # Debug: Log the API response
    echo "API Response:"
    echo "$RESPONSE"

    SCENARIO=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "Error: Unable to process scenario."')

    if [[ "$SCENARIO" == Error* ]]; then
      echo "Error during scenario generation: $SCENARIO"
      exit 1
    fi

    echo -e "$SCENARIO" > "$OUTPUT_FILE"
