      - name: Generate Vocabulary Frequency
        id: vocabulary_frequency
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Initialize a temporary file to collect vocabulary
          mkdir -p temp_vocabulary
          VOCAB_FILE="temp_vocabulary/vocabulary.txt"
          > "$VOCAB_FILE"

          # Collect vocabulary from processed files
          FILE_LIST=$(find processed/ -type f -name "${{ env.YEAR }}-${{ env.MONTH }}-*.txt")
          if [ -z "$FILE_LIST" ]; then
            echo "Error: No processed files found for ${{ env.YEAR }}-${{ env.MONTH }}."
            exit 1
          fi

          for FILE in $FILE_LIST; do
            echo "Processing file: $FILE"
            # Extract vocabulary section
            VOCAB=$(sed -n '/Vocabulary List:/,/^$/p' "$FILE" | grep -v "Vocabulary List:")
            if [ -n "$VOCAB" ]; then
              echo "$VOCAB" >> "$VOCAB_FILE"
            else
              echo "No vocabulary found in $FILE."
            fi
          done

          if [ ! -s "$VOCAB_FILE" ]; then
            echo "No vocabulary found across all files for ${{ env.YEAR }}-${{ env.MONTH }}."
            exit 1
          fi

          echo "Combined vocabulary file created: $VOCAB_FILE"
          
          # Use OpenAI API for frequency calculation
          VOCABULARY=$(cat "$VOCAB_FILE")
          PAYLOAD=$(jq -n --arg vocab "$VOCABULARY" '{
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "user",
                content: (
                  "Analyze the following vocabulary list and count the frequency of each unique word. Format the output as:\n\n" +
                  "Word | Frequency\n\n" +
                  "Vocabulary:\n" +
                  $vocab
                )
              }
            ],
            max_tokens: 1000
          }')

          RESPONSE=$(echo "$PAYLOAD" | curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @-)

          VOCAB_SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "Error: Unable to process vocabulary."')

          if [[ "$VOCAB_SUMMARY" == Error* ]]; then
            echo "Error during vocabulary analysis: $VOCAB_SUMMARY"
            exit 1
          fi

          echo "$VOCAB_SUMMARY" > vocab_summary.txt
          echo "Vocabulary analysis complete."
