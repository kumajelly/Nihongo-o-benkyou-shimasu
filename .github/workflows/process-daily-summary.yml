name: Daily Process Summary
on:
  workflow_dispatch:
    inputs:
      date:
        description: 'Date to process (YYYY-MM-DD, optional)'
        required: false
        default: ''
  schedule:
    - cron: "0 8 * * *" # Runs daily at 8 AM UTC

jobs:
  process-summary:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Directories
        run: |
          mkdir -p daily-summaries
          mkdir -p processed

      - name: Determine Date
        id: determine_date
        run: |
          if [ -z "${{ github.event.inputs.date }}" ]; then
            PST_DATE=$(date -d '-1 day -8 hours' '+%Y-%m-%d')
          else
            PST_DATE=${{ github.event.inputs.date }}
          fi
          echo "PST_DATE=$PST_DATE" >> $GITHUB_ENV

      - name: Find File
        id: find_file
        run: |
          INPUT_FILE=$(find daily-summaries/ -type f -name "${PST_DATE}.txt" || true)
          if [ -z "$INPUT_FILE" ]; then
            echo "Error: No input file found for date $PST_DATE."
            exit 1
          fi
          echo "INPUT_FILE=$INPUT_FILE" >> $GITHUB_ENV

      - name: Process File with OpenAI API
        id: process_file
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          INPUT_FILE=${{ env.INPUT_FILE }}
          OUTPUT_FILE="processed/$(basename "$INPUT_FILE")"
          CONTENT=$(cat "$INPUT_FILE" || true)

          if [ -z "$CONTENT" ]; then
            echo "Error: Input file is empty or unreadable."
            exit 1
          fi

          ESCAPED_PROMPT=$(jq -n --arg text "$CONTENT" '{
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "user",
                content: (
                  "Translate the following text to JLPT N5 level Japanese and provide detailed annotations in a clean, structured format. The output should include:\n\n" +
                  "1. **Translation**: Provide the text translated into Japanese with appropriate kanji, hiragana, and grammar, written as complete sentences with correct punctuation.\n\n" +
                  "2. **Romaji**: Provide the romanized pronunciation of the translated Japanese text, corresponding to the Japanese sentences.\n\n" +
                  "3. **Sentence Breakdown**:\n" +
                  "   - Break down each Japanese sentence into key components, explaining:\n" +
                  "     - Particles: Identify and explain their function.\n" +
                  "     - Verbs: Specify the verb, its dictionary form, and its conjugation.\n" +
                  "     - Adjectives: Identify their type (e.g., i-adjective, na-adjective).\n" +
                  "   - Provide a brief explanation of the grammar used.\n\n" +
                  "4. **Vocabulary List**: List the key words used in the translation, with:\n" +
                  "   - Their meanings.\n" +
                  "   - Part of speech (e.g., noun, verb, adjective).\n" +
                  "   - Example sentences, if applicable.\n\n" +
                  "5. **Original English Text**: Include the original English sentences as a footer, clearly marked as \"Original English Text.\"\n\n" +
                  "Ensure the output is well-formatted and easy to read, without any unnecessary escape sequences or line breaks. Use the following text:\n" +
                  $text
                )
              }
            ],
            max_tokens: 2000
          }')

          RESPONSE=$(echo "$ESCAPED_PROMPT" | curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @-)

          if [ -z "$RESPONSE" ]; then
            echo "Error: No response from OpenAI API."
            exit 1
          fi

          TRANSLATION=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "Error: Unable to get translation due to API issues"')

          if [[ "$TRANSLATION" == Error* ]]; then
            echo "Error during translation: $TRANSLATION"
            exit 1
          fi

          echo "$TRANSLATION" > "$OUTPUT_FILE"
          echo "$TRANSLATION" > translation_body.txt

          echo "TRANSLATION=$TRANSLATION" >> $GITHUB_ENV
          echo "OUTPUT_FILE=$OUTPUT_FILE" >> $GITHUB_ENV

      - name: Send Email with Python
        run: |
          sudo apt-get install -y python3 python3-pip
          echo "Installing email library..."
          pip3 install yagmail
          python3 <<EOF
import yagmail
import os

# Credentials
email_user = os.getenv("GMAIL_USERNAME")
email_password = os.getenv("GMAIL_PASSWORD")
recipient = "seanthomasward@gmail.com"

# Read content
with open("translation_body.txt", "r") as file:
    email_body = file.read()

subject = f"Processed File: {os.getenv('INPUT_FILE')}"

# Initialize email client
yag = yagmail.SMTP(email_user, email_password)

# Send email
yag.send(
    to=recipient,
    subject=subject,
    contents=email_body
)
print("Email sent successfully!")
EOF
        env:
          GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
          GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
